#include "TFLidar.h"              // Подключение библиотеки для работы с LIDAR
#include <SoftwareSerial.h>        // Подключение библиотеки для программного последовательного порта

// Настройка программного последовательного порта для связи с LIDAR
SoftwareSerial mySerial(10, 11);  // Пины TX и RX для связи с LIDAR
#define LIDAR_SERIAL mySerial      // Определяем LIDAR_SERIAL как mySerial для удобства

TFLidar lidar;                    // Объект для работы с LIDAR
int dist;                          // Переменная для хранения текущего расстояния
int lastDist = 0;                  // Переменная для хранения последнего значения расстояния
int threshold = 10;                // Порог для изменения расстояния (в см)

void setup() {
  Serial.begin(9600);              // Инициализация серийного порта для вывода данных
  while (!Serial);                 // Ожидание подключения серийного порта
  
  Serial.print("Serial init OK\r\n"); // Выводим сообщение, что серийный порт инициализирован
  
  LIDAR_SERIAL.begin(115200);      // Инициализация программного порта для LIDAR с соответствующей скоростью передачи данных
  lidar.begin(&LIDAR_SERIAL);      // Инициализация LIDAR устройства с использованием программного порта
  
  pinMode(13, OUTPUT);             // Устанавливаем пин 13 как выход для управления индикатором
  digitalWrite(13, LOW);           // Изначально выключаем пин 13
}

void loop() {
  lidar.getData(dist);             // Получаем данные от LIDAR и сохраняем в переменную dist
  
  // Проверяем, изменилось ли расстояние более чем на 10 см по сравнению с последним измерением
  if (abs(dist - lastDist) > threshold) {
    // Если расстояние изменилось более чем на 10 см, включаем пин 13 (например, включение индикатора)
    digitalWrite(13, HIGH);
  } else {
    // Если расстояние изменилось менее чем на 10 см, выключаем пин 13
    digitalWrite(13, LOW);
  }

  // Отображаем текущее значение расстояния в серийном мониторе
  Serial.print("Dist: ");
  Serial.print(dist);
  Serial.print(" cm");
  Serial.println();
  
  // Обновляем последнее измеренное значение расстояния для использования в следующем цикле
  lastDist = dist;
  
  delay(100);                      // Задержка 100 мс перед следующим циклом
}
